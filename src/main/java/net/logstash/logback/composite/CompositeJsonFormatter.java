/**
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.logstash.logback.composite;

import java.io.IOException;
import java.io.OutputStream;
import java.io.Writer;
import java.lang.ref.SoftReference;
import java.lang.reflect.InvocationTargetException;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.ServiceConfigurationError;

import ch.qos.logback.access.spi.IAccessEvent;
import ch.qos.logback.classic.spi.ILoggingEvent;
import ch.qos.logback.core.spi.ContextAware;
import ch.qos.logback.core.spi.ContextAwareBase;
import ch.qos.logback.core.spi.DeferredProcessingAware;
import ch.qos.logback.core.spi.LifeCycle;
import net.logstash.logback.decorate.CompositeJsonGeneratorDecorator;
import net.logstash.logback.decorate.CompositeMapperBuilderDecorator;
import net.logstash.logback.decorate.CompositeTokenStreamFactoryBuilderDecorator;
import net.logstash.logback.dataformat.DataFormatFactory;
import net.logstash.logback.decorate.Decorator;
import net.logstash.logback.dataformat.json.JsonDataFormatFactory;
import net.logstash.logback.decorate.JsonGeneratorDecorator;
import net.logstash.logback.decorate.MapperBuilderDecorator;
import net.logstash.logback.decorate.TokenStreamFactoryBuilderDecorator;

import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.StreamWriteFeature;
import com.fasterxml.jackson.core.TokenStreamFactory;
import com.fasterxml.jackson.core.io.SegmentedStringWriter;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.MapperBuilder;

/**
 * Formats logstash Events as JSON using {@link JsonProvider}s.
 * <p>
 *
 * The {@link CompositeJsonFormatter} starts the JSON object ('{'),
 * then delegates writing the contents of the object to the {@link JsonProvider}s,
 * and then ends the JSON object ('}').
 *
 * @param <Event> type of event ({@link ILoggingEvent} or {@link IAccessEvent}).
 */
public abstract class CompositeJsonFormatter<Event extends DeferredProcessingAware>
        extends ContextAwareBase implements LifeCycle {

    /**
     * Built-in data formats.
     */
    private static final Map<String, String> DATA_FORMATS;
    static {
        Map<String, String> dataFormats = new HashMap<>();
        dataFormats.put(DataFormatFactory.JSON, "net.logstash.logback.dataformat.json.JsonDataFormatFactory");
        dataFormats.put(DataFormatFactory.YAML, "net.logstash.logback.dataformat.yaml.YamlDataFormatFactory");
        dataFormats.put(DataFormatFactory.CBOR, "net.logstash.logback.dataformat.cbor.CborDataFormatFactory");
        dataFormats.put(DataFormatFactory.SMILE, "net.logstash.logback.dataformat.smile.SmileDataFormatFactory");
        DATA_FORMATS = Collections.unmodifiableMap(dataFormats);
    }

    /**
     * This <code>ThreadLocal</code> contains a {@link java.lang.ref.SoftReference}
     * to a {@link BufferRecycler} used to provide a low-cost
     * buffer recycling between writer instances.
     */
    private final ThreadLocal<SoftReference<BufferRecycler>> recycler = new ThreadLocal<SoftReference<BufferRecycler>>() {
        protected SoftReference<BufferRecycler> initialValue() {
            final BufferRecycler bufferRecycler = new BufferRecycler();
            return new SoftReference<BufferRecycler>(bufferRecycler);
        }
    };

    /**
     * Factory for creating builders for a data format supported by jackson.
     */
    private DataFormatFactory dataFormatFactory = new JsonDataFormatFactory();

    /**
     * Decorates the builder that builds the {@link #objectMapper}.
     * Allows customization of the {@link #objectMapper}.
     */
    private CompositeMapperBuilderDecorator mapperBuilderDecorator = new CompositeMapperBuilderDecorator();

    /**
     * Decorates the builder that builds the {@link TokenStreamFactory} used by the {@link #objectMapper}.
     * Allows customization of the {@link TokenStreamFactory}.
     */
    private CompositeTokenStreamFactoryBuilderDecorator tokenStreamFactoryBuilderDecorator = new CompositeTokenStreamFactoryBuilderDecorator();

    /**
     * Decorates the generators generated by the {@link #objectMapper}.
     * Allows customization of the generators.
     */
    private CompositeJsonGeneratorDecorator<JsonGenerator> jsonGeneratorDecorator = new CompositeJsonGeneratorDecorator<>();

    /**
     * Used to create the {@link JsonGenerator}s for generating output.
     */
    private ObjectMapper objectMapper;

    /**
     * The providers that are used to populate the output JSON object.
     */
    private JsonProviders<Event> jsonProviders = new JsonProviders<Event>();

    private JsonEncoding encoding = JsonEncoding.UTF8;

    private boolean findAndRegisterJacksonModules = true;

    private volatile boolean started;

    public CompositeJsonFormatter(ContextAware declaredOrigin) {
        super(declaredOrigin);
    }

    @Override
    public void start() {
        if (jsonProviders.getProviders().isEmpty()) {
            addError("No providers configured");
        }
        objectMapper = createObjectMapper(createTokenStreamFactory());
        jsonProviders.setContext(context);
        jsonProviders.setObjectMapper(objectMapper);
        jsonProviders.start();
        started = true;
    }

    @Override
    public void stop() {
        jsonProviders.stop();
        started = false;
    }

    @Override
    public boolean isStarted() {
        return started;
    }

    private ObjectMapper createObjectMapper(TokenStreamFactory tokenStreamFactory) {

        MapperBuilder mapperBuilder = dataFormatFactory.createMapperBuilder(tokenStreamFactory)
                /*
                 * Assume empty beans are ok.
                 */
                .disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);

        if (findAndRegisterJacksonModules) {
            try {
                mapperBuilder = mapperBuilder.findAndAddModules();
            } catch (ServiceConfigurationError serviceConfigurationError) {
                addError("Error occurred while dynamically loading jackson modules", serviceConfigurationError);
            }
        }

        mapperBuilder = (MapperBuilder) this.mapperBuilderDecorator.decorate(mapperBuilder);

        return mapperBuilder.build();
    }

    private TokenStreamFactory createTokenStreamFactory() {
        TokenStreamFactory.TSFBuilder tokenStreamFactoryBuilder = dataFormatFactory.createTokenStreamFactoryBuilder()
                /*
                 * When generators are flushed, don't flush the underlying outputStream.
                 *
                 * This allows some streaming optimizations when using an encoder.
                 *
                 * The encoder generally determines when the stream should be flushed
                 * by an 'immediateFlush' property.
                 *
                 * The 'immediateFlush' property of the encoder can be set to false
                 * when the appender performs the flushes at appropriate times
                 * (such as the end of a batch in the AbstractLogstashTcpSocketAppender).
                 */
                .disable(StreamWriteFeature.FLUSH_PASSED_TO_STREAM);

        tokenStreamFactoryBuilder = (TokenStreamFactory.TSFBuilder) tokenStreamFactoryBuilderDecorator.decorate(tokenStreamFactoryBuilder);

        return tokenStreamFactoryBuilder.build();
    }

    public byte[] writeEventAsBytes(Event event) throws IOException {
        ByteArrayBuilder outputStream = new ByteArrayBuilder(getBufferRecycler());

        try {
            writeEventToOutputStream(event, outputStream);
            outputStream.flush();
            return outputStream.toByteArray();
        } finally {
            outputStream.release();
        }
    }

    public void writeEventToOutputStream(Event event, OutputStream outputStream) throws IOException {
        try (JsonGenerator generator = createGenerator(outputStream)) {
            writeEventToGenerator(generator, event);
        }
        /*
         * Do not flush the outputStream.
         *
         * Allow something higher in the stack (e.g. the encoder/appender)
         * to determine appropriate times to flush.
         */
    }

    public String writeEventAsString(Event event) throws IOException {
        SegmentedStringWriter writer = new SegmentedStringWriter(getBufferRecycler());

        try (JsonGenerator generator = createGenerator(writer)) {
            writeEventToGenerator(generator, event);
            writer.flush();
            return writer.getAndClear();
        }
    }

    protected void writeEventToGenerator(JsonGenerator generator, Event event) throws IOException {
        if (!isStarted()) {
            throw new IllegalStateException("Encoding attempted before starting.");
        }
        generator.writeStartObject();
        jsonProviders.writeTo(generator, event);
        generator.writeEndObject();
        generator.flush();
    }

    protected void prepareForDeferredProcessing(Event event) {
        event.prepareForDeferredProcessing();
        jsonProviders.prepareForDeferredProcessing(event);
    }

    private JsonGenerator createGenerator(OutputStream outputStream) throws IOException {
        return this.jsonGeneratorDecorator.decorate(objectMapper.createGenerator(outputStream, encoding));
    }

    private JsonGenerator createGenerator(Writer writer) throws IOException {
        return this.jsonGeneratorDecorator.decorate(objectMapper.createGenerator(writer));
    }

    private BufferRecycler getBufferRecycler() {
        SoftReference<BufferRecycler> bufferRecyclerReference = recycler.get();
        BufferRecycler bufferRecycler = bufferRecyclerReference.get();
        if (bufferRecycler == null) {
            recycler.remove();
            return getBufferRecycler();
        }
        return bufferRecycler;
    }

    /**
     * Gets the name of the currently configured data format.
     *
     * @return the name of the currently configured data format.
     */
    public String getDataFormat() {
        return dataFormatFactory.getName();
    }

    /**
     * Sets the dataformat to one of the build-in data formats (
     * {@value DataFormatFactory#JSON},
     * {@value DataFormatFactory#YAML},
     * {@value DataFormatFactory#CBOR}, or
     * {@value DataFormatFactory#SMILE}).
     *
     * <p>For non-JSON data formats, the appropriate Jackson data format module must be on the classpath.</p>
     *
     * <p>To set a custom (non-builtin) data format, use {@link #setDataFormatFactory(DataFormatFactory)}</p>
     *
     * @param dataFormat {@value DataFormatFactory#JSON},
     *                   {@value DataFormatFactory#YAML},
     *                   {@value DataFormatFactory#CBOR}, or
     *                    {@value DataFormatFactory#SMILE}
     * @see #setDataFormatFactory(DataFormatFactory)
     */
    public void setDataFormat(String dataFormat) {
        String dataFormatClassName = DATA_FORMATS.get(dataFormat);
        if (dataFormatClassName == null) {
            throw new IllegalArgumentException(String.format("Unknown data format: %s.  Known data formats are: ", dataFormat, String.join(",", DATA_FORMATS.keySet())));
        }
        try {
            setDataFormatFactory((DataFormatFactory) Class.forName(dataFormatClassName).getConstructor().newInstance());
        } catch (ClassNotFoundException e) {
            throw new IllegalArgumentException(String.format("Unable to instantiate %s. Ensure the appropriate jackson dataformat module is on the classpath.", dataFormatClassName), e);
        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {
            throw new IllegalArgumentException(String.format("Unable to instantiate %s.", dataFormatClassName), e);
        }
    }

    /**
     * Gets the currently configured {@link DataFormatFactory}.
     *
     * @return the currently configured {@link DataFormatFactory}.
     */
    public DataFormatFactory getDataFormatFactory() {
        return dataFormatFactory;
    }

    /**
     * Sets the {@link DataFormatFactory} to be used for output.
     *
     * <p>For built-in formats, prefer using  {@link #setDataFormat(String)}</p>
     *
     * @param dataFormatFactory the {@link DataFormatFactory} to be used for output.
     */
    public void setDataFormatFactory(DataFormatFactory dataFormatFactory) {
        this.dataFormatFactory = Objects.requireNonNull(dataFormatFactory);
    }

    /**
     * Adds the given decorator of type {@link MapperBuilderDecorator}, {@link TokenStreamFactoryBuilderDecorator}, or {@link JsonGeneratorDecorator}.
     *
     * <p>These decorators decorate Jackson objects.</p>
     *
     * @param decorator the decorator to add (of type {@link MapperBuilderDecorator}, {@link TokenStreamFactoryBuilderDecorator}, or {@link JsonGeneratorDecorator})
     * @throws IllegalArgumentException if an unsupported decorator is added
     */
    public void addDecorator(Decorator<?> decorator) {
        Objects.requireNonNull(decorator);
        if (decorator instanceof MapperBuilderDecorator) {
            mapperBuilderDecorator.addDecorator(decorator);
        } else if (decorator instanceof TokenStreamFactoryBuilderDecorator) {
            tokenStreamFactoryBuilderDecorator.addDecorator(decorator);
        } else if (decorator instanceof JsonGeneratorDecorator) {
            jsonGeneratorDecorator.addDecorator((JsonGeneratorDecorator<JsonGenerator>) decorator);
        } else {
            throw new IllegalArgumentException("Unknown decorator type:" + decorator.getClass().getName());
        }
    }

    /**
     * Gets a mutable {@link CompositeTokenStreamFactoryBuilderDecorator}
     * containing all the currently configured {@link TokenStreamFactoryBuilderDecorator}s.
     *
     * @return a mutable {@link CompositeTokenStreamFactoryBuilderDecorator}
     *         containing all the currently configured {@link TokenStreamFactoryBuilderDecorator}s.
     */
    public CompositeTokenStreamFactoryBuilderDecorator getTokenStreamFactoryBuilderDecorator() {
        return tokenStreamFactoryBuilderDecorator;
    }

    /**
     * Gets a mutable {@link CompositeMapperBuilderDecorator}
     * containing all the currently configured {@link MapperBuilderDecorator}s.
     *
     * @return a mutable {@link CompositeMapperBuilderDecorator}
     *         containing all the currently configured {@link MapperBuilderDecorator}s.
     */
    public CompositeMapperBuilderDecorator getMapperBuilderDecorator() {
        return mapperBuilderDecorator;
    }

    /**
     * Gets a mutable {@link CompositeJsonGeneratorDecorator}
     * containing all the currently configured {@link JsonGeneratorDecorator}s.
     *
     * @return a mutable {@link CompositeJsonGeneratorDecorator}
     *         containing all the currently configured {@link JsonGeneratorDecorator}s.
     */
    public CompositeJsonGeneratorDecorator getJsonGeneratorDecorator() {
        return jsonGeneratorDecorator;
    }

    public JsonProviders<Event> getProviders() {
        return jsonProviders;
    }

    public String getEncoding() {
        return encoding.getJavaName();
    }

    public void setEncoding(String encodingName) {
        for (JsonEncoding encoding: JsonEncoding.values()) {
            if (encoding.getJavaName().equals(encodingName) || encoding.name().equals(encodingName)) {
                this.encoding = encoding;
                return;
            }
        }
        throw new IllegalArgumentException("Unknown encoding " + encodingName);
    }

    public void setProviders(JsonProviders<Event> jsonProviders) {
        this.jsonProviders = jsonProviders;
    }

    public boolean isFindAndRegisterJacksonModules() {
        return findAndRegisterJacksonModules;
    }

    public void setFindAndRegisterJacksonModules(boolean findAndRegisterJacksonModules) {
        this.findAndRegisterJacksonModules = findAndRegisterJacksonModules;
    }
}
